// Mocks generated by Mockito 5.2.0 from annotations
// in cryptstorage/test/token_service.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:typed_data' as _i5;

import 'package:cryptstorage/smartcard/smartcard_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:yubikit_flutter/yubikit_flutter.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeYubikitOpenPGP_0 extends _i1.Fake implements _i2.YubikitOpenPGP {}

class _FakePinRetries_1 extends _i1.Fake implements _i2.PinRetries {}

class _FakeApplicationVersion_2 extends _i1.Fake
    implements _i2.ApplicationVersion {}

class _FakeOpenPGPVersion_3 extends _i1.Fake implements _i2.OpenPGPVersion {}

class _FakeECKeyData_4 extends _i1.Fake implements _i2.ECKeyData {}

class _FakeRSAKeyData_5 extends _i1.Fake implements _i2.RSAKeyData {}

/// A class which mocks [SmartCardService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSmartCardService extends _i1.Mock implements _i3.SmartCardService {
  MockSmartCardService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.YubikitOpenPGP getService() =>
      (super.noSuchMethod(Invocation.method(#getService, []),
          returnValue: _FakeYubikitOpenPGP_0()) as _i2.YubikitOpenPGP);
  @override
  _i4.Future<void> toggleMock() =>
      (super.noSuchMethod(Invocation.method(#toggleMock, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  bool isMock() =>
      (super.noSuchMethod(Invocation.method(#isMock, []), returnValue: false)
          as bool);
  @override
  _i4.Future<_i2.PinRetries> getRemainingPinTries() =>
      (super.noSuchMethod(Invocation.method(#getRemainingPinTries, []),
              returnValue: Future<_i2.PinRetries>.value(_FakePinRetries_1()))
          as _i4.Future<_i2.PinRetries>);
  @override
  _i4.Future<void> reset() => (super.noSuchMethod(Invocation.method(#reset, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<_i5.Uint8List> ecSharedSecret(List<int>? publicKey) =>
      (super.noSuchMethod(Invocation.method(#ecSharedSecret, [publicKey]),
              returnValue: Future<_i5.Uint8List>.value(_i5.Uint8List(0)))
          as _i4.Future<_i5.Uint8List>);
  @override
  _i4.Future<_i2.ApplicationVersion> getApplicationVersion() =>
      (super.noSuchMethod(Invocation.method(#getApplicationVersion, []),
              returnValue: Future<_i2.ApplicationVersion>.value(
                  _FakeApplicationVersion_2()))
          as _i4.Future<_i2.ApplicationVersion>);
  @override
  _i4.Future<_i2.OpenPGPVersion> getOpenPGPVersion() =>
      (super.noSuchMethod(Invocation.method(#getOpenPGPVersion, []),
              returnValue:
                  Future<_i2.OpenPGPVersion>.value(_FakeOpenPGPVersion_3()))
          as _i4.Future<_i2.OpenPGPVersion>);
  @override
  _i4.Future<_i2.TouchMode> getTouch(_i2.KeySlot? keySlot) =>
      (super.noSuchMethod(Invocation.method(#getTouch, [keySlot]),
              returnValue: Future<_i2.TouchMode>.value(_i2.TouchMode.off))
          as _i4.Future<_i2.TouchMode>);
  @override
  _i4.Future<void> setPinRetries(int? pw1Tries, int? pw2Tries, int? pw3Tries) =>
      (super.noSuchMethod(
          Invocation.method(#setPinRetries, [pw1Tries, pw2Tries, pw3Tries]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> setTouch(_i2.KeySlot? keySlot, _i2.TouchMode? mode) =>
      (super.noSuchMethod(Invocation.method(#setTouch, [keySlot, mode]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<_i5.Uint8List> ecSign(List<int>? data) =>
      (super.noSuchMethod(Invocation.method(#ecSign, [data]),
              returnValue: Future<_i5.Uint8List>.value(_i5.Uint8List(0)))
          as _i4.Future<_i5.Uint8List>);
  @override
  _i4.Future<_i2.ECKeyData> generateECKey(
          _i2.KeySlot? keySlot, _i2.ECCurve? curve, [int? timestamp]) =>
      (super.noSuchMethod(
              Invocation.method(#generateECKey, [keySlot, curve, timestamp]),
              returnValue: Future<_i2.ECKeyData>.value(_FakeECKeyData_4()))
          as _i4.Future<_i2.ECKeyData>);
  @override
  _i4.Future<_i2.RSAKeyData> generateRSAKey(_i2.KeySlot? keySlot, int? keySize,
          [int? timestamp]) =>
      (super.noSuchMethod(
              Invocation.method(#generateRSAKey, [keySlot, keySize, timestamp]),
              returnValue: Future<_i2.RSAKeyData>.value(_FakeRSAKeyData_5()))
          as _i4.Future<_i2.RSAKeyData>);
  @override
  _i4.Future<_i2.KeyData?> getPublicKey(_i2.KeySlot? keySlot) =>
      (super.noSuchMethod(Invocation.method(#getPublicKey, [keySlot]),
              returnValue: Future<_i2.KeyData?>.value())
          as _i4.Future<_i2.KeyData?>);
  @override
  _i4.Future<_i5.Uint8List> rsaSign(List<int>? data) =>
      (super.noSuchMethod(Invocation.method(#rsaSign, [data]),
              returnValue: Future<_i5.Uint8List>.value(_i5.Uint8List(0)))
          as _i4.Future<_i5.Uint8List>);
  @override
  _i4.Future<_i5.Uint8List> decipher(List<int>? ciphertext) =>
      (super.noSuchMethod(Invocation.method(#decipher, [ciphertext]),
              returnValue: Future<_i5.Uint8List>.value(_i5.Uint8List(0)))
          as _i4.Future<_i5.Uint8List>);
}
